000000110010 00001 000 00001 0010011	// addi x1,x1,50
100000010100 00001 000 00010 0010011	// addi x2,x1,-2028
100000010100 00001 010 00011 0010011	// slti x3,x1,-2028
100000010100 00001 011 00100 0010011	// sltiu x4,x1,-2028
100000010100 00001 100 00101 0010011	// xori x5,x1,-2028 
100000010100 00001 110 00110 0010011	// ori x6,x1,-2028
100000010100 00001 111 00111 0010011	// andi x7,x1,-2028
0000000 00011 00010 001 01000 0010011	// slli x8,x2,3
0000000 00011 00010 101 01001 0010011	// srli x9,x2,3
0100000 00011 00010 101 01010 0010011	// srai x10,x2,3

000000110010 01101 000 01101 0010011	// addi rd[13],rs1[13],50
100000010100 01110 000 01110 0010011	// addi rd[14],rs1[14],-2028
100000010100 01111 010 01111 0010011	// slti rd[15],rs1[15],-2028 
100000010100 10000 011 10000 0010011	// sltiu rd[16],rs1[16],-2028
100000010100 10001 100 10001 0010011	// xori rd[17],rs1[17],-2028
100000010100 10010 110 10010 0010011	// ori rd[18],rs1[18],-2028
100000010100 10011 111 10011 0010011	// andi rd[19],rs1[19],-2028
0000000 00010 01101 001 10100 0010011	// slli rd[20],rs2[13],2
0000000 00010 01110 101 10101 0010011	// srli rd[21],rs2[14],2
0100000 00010 01111 101 10110 0010011	// srai rd[22],rs2[15],2

03268693	// addi rd[13],rs1[13],50 50
81470713	// addi rd[14],rs1[14],-2028  -2028
8147A793	// slti rd[15],rs1[15],-2028  0
81483813	// sltiu rd[16],rs1[16],-2028 1
8148C893	// xori rd[17],rs1[17],-2028  1111 1111 1111 1111 1111 0111 1110 1011
81496913	// ori rd[18],rs1[18],-2028 0000 0000 0000 0000 0000 1000 0001 0100
8149F993	// andi rd[19],rs1[19],-2028  0000 0000 0000 0000 0000 0000 0000 0000
00269A13	// slli rd[20],rs1[13],2  11001000
00275A93	// srli rd[21],rs1[14],2  001000000101
4027DB13	// srai rd[22],rs1[15],2  100000000101




10000000000000000000000000000000
    //lui test
    processor.instr_mem.imem[0] = {32'b10000000000000000001_00001_0110111};           // lui  x1, imm 
    //load data from data memory to registor file
    //load test
000000000000 00001 010 00010 0000011
    processor.instr_mem.imem[1] = {32'b000000000000_00001_010_00010_0000011};       // lw x2,x1(0) data memory address start at 0x80000000
    processor.instr_mem.imem[2] = {32'b000000000100_00001_001_00011_0000011};       // lh x3,x1(4)
    processor.instr_mem.imem[3] = {32'b000000001000_00001_000_00100_0000011};       // lb x4,x1(8)